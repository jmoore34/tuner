{"version":3,"sources":["logo.svg","ButtonGrid.jsx","Tuner.jsx","App.js","Metronome.jsx","registerServiceWorker.js","index.js"],"names":["module","exports","ButtonGrid","class","this","props","rows","map","row","Component","NOTES","name","displayNames","step","Waveforms","displayName","OCTAVES","polySynth","Tone","PolySynth","length","Synth","toMaster","set","Tuner","state","pitchCenter","currentNoteNames","currentOctaves","currentNoteDisplayTypeIndex","waveform","flipNotation","bind","resetNoteNames","toggleOctave","resetOctaves","setAllOctaves","handleFrequencyInputChange","startIndex","endIndex","buttons","i","getNoteButton","index","className","key","active","includes","onClick","toggleNoteName","content","toggle","cols","groups","col","Group","vertical","setState","noteName","filter","pitch","octave","oct","event","target","value","delta","Number","type","frequencies","forEach","note","Math","pow","octaveButtons","size","Field","fluid","placeholder","action","onChange","label","labelPosition","deltaFrequency","getNoteButtons","setWaveform","prevProps","prevState","newFreqs","getFrequencies","oldFreqs","console","log","oscillator","releaseAll","triggerAttack","oldFreq","triggerRelease","newFreq","App","columns","padded","doubling","stackable","centered","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","noSleep","NoSleep","enableNoSleep","removeEventListener","enable"],"mappings":"+IAAAA,EAAOC,QAAU,IAA0B,kC,iNCoB5BC,G,mKAfX,WACI,OACE,yBAAKC,MAAM,cACNC,KAAKC,MAAMC,KAAKC,KACb,SAAAC,GAAG,OACC,6BACKA,W,GARFC,c,kBCGnBC,EAAQ,CACV,CAACC,KAAM,IAAKC,aAAc,CAAC,IAAI,KAAMC,KAAM,GAC3C,CAACF,KAAM,KAAMC,aAAc,CAAC,UAAK,WAAOC,KAAM,GAC9C,CAACF,KAAM,IAAKC,aAAc,CAAC,IAAI,KAAMC,KAAM,GAC3C,CAACF,KAAM,IAAKC,aAAc,CAAC,IAAI,KAAMC,KAAM,GAC3C,CAACF,KAAM,KAAMC,aAAc,CAAC,UAAK,WAAOC,KAAM,GAC9C,CAACF,KAAM,IAAKC,aAAc,CAAC,IAAI,KAAMC,KAAM,GAC3C,CAACF,KAAM,KAAMC,aAAc,CAAC,UAAK,WAAOC,KAAM,GAC9C,CAACF,KAAM,IAAKC,aAAc,CAAC,IAAI,KAAMC,KAAM,GAC3C,CAACF,KAAM,IAAKC,aAAc,CAAC,IAAI,KAAMC,KAAM,GAC3C,CAACF,KAAM,KAAMC,aAAc,CAAC,UAAK,WAAOC,KAAM,GAC9C,CAACF,KAAM,IAAKC,aAAc,CAAC,IAAI,KAAMC,KAAM,IAC3C,CAACF,KAAM,KAAMC,aAAc,CAAC,UAAK,WAAOC,KAAM,KAG5CC,EAAY,CACd,CAACH,KAAM,OAAQI,YAAa,QAC5B,CAACJ,KAAM,WAAYI,YAAa,YAChC,CAACJ,KAAM,SAAUI,YAAa,UAC9B,CAACJ,KAAM,WAAYI,YAAa,aAGEC,EAAU,CAAC,EAAE,EAAE,EAAE,EAAE,GAezD,IAAMC,EAAY,IAAIC,IAAKC,UAAUH,EAAQI,OAAOV,EAAMU,OAAQF,IAAKG,OAAOC,WAC9EL,EAAUM,IAAI,CACV,SAAY,CACR,OAAU,GACV,MAAS,EACT,QAAW,GACX,QAAW,GACZ,WAAc,CACb,KAAQ,U,IAuRDC,E,kDA/QX,aACC,IAAD,8BACI,gBAEKC,MAAQ,CACTC,YAAa,IACbC,iBAAkB,GAClBC,eAAgB,CAAC,GACjBC,4BAA6B,EAC7BC,SAAU,QAGd,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,aAAe,EAAKA,aAAaF,KAAlB,gBACpB,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBACpB,EAAKI,cAAgB,EAAKA,cAAcJ,KAAnB,gBACrB,EAAKK,2BAA6B,EAAKA,2BAA2BL,KAAhC,gBAhBtC,E,kDAmBA,SAAeM,EAAWC,GAGtB,IADA,IAAIC,EAAU,GACLC,EAAEH,EAAYG,GAAGF,IAAYE,EAElCD,EAAO,sBAAOA,GAAP,CAAgBpC,KAAKsC,cAAcD,KAG9C,OAAOD,I,2BAGX,SAAcG,GACb,IAAD,OAEI,OACI,kBAAC,IAAD,CAAQC,UAAU,UACVC,IAAOF,EACPG,OAJA1C,KAIgBqB,MAAME,iBAAiBoB,SAASrC,EAAMiC,IACtDK,QAAW,kBAAM,EAAKC,eAAevC,EAAMiC,KAC3CO,QAAWxC,EAAMiC,GAAO/B,aAAaR,KAAKqB,MAAMI,6BAChDsB,QAAM,M,uCAItB,WAGI,IAFH,IADyB7C,EAC1B,uDAD+B,EAAE8C,EACjC,uDADsC,EAE9BC,EAAS,GACJC,EAAI,EAAGA,EAAIF,EAAME,GAAK,EAC/B,CAEI,IADA,IAAId,EAAU,GACLhC,EAAI,EAAGA,EAAIF,IAAQE,EAExBgC,EAAO,sBAAOA,GAAP,CAAgBpC,KAAKsC,cAAcY,EAAMF,EAAK5C,KAEzD6C,EAAM,sBAAOA,GAAP,CAEE,kBAAC,IAAOE,MAAR,CAAcV,IAAKS,EAAKE,UAAQ,GAC3BhB,KAKjB,OAAOa,I,0BAGX,WAEIjD,KAAKqD,SACD,CACI5B,4BAAwE,IAA3CzB,KAAKqB,MAAMI,4BAAoC,EAAI,M,4BAK5F,SAAe6B,GAEPtD,KAAKqB,MAAME,iBAAiBoB,SAASW,GAErCtD,KAAKqD,SAAS,CACN9B,iBAAkBvB,KAAKqB,MAAME,iBAAiBgC,QAC1C,SAAAC,GAAK,OAAIA,IAAUF,OAM/BtD,KAAKqD,SAAS,CACV9B,iBAAiB,GAAD,mBAAMvB,KAAKqB,MAAME,kBAAjB,CAAmC+B,Q,4BAK/D,WAEItD,KAAKqD,SAAS,CACV9B,iBAAkB,O,0BAI1B,SAAakC,GAELzD,KAAKqB,MAAMG,eAAemB,SAASc,GAEnCzD,KAAKqD,SAAS,CACV7B,eAAgBxB,KAAKqB,MAAMG,eAAe+B,QACtC,SAAAG,GAAG,OAAIA,IAAQD,OAMvBzD,KAAKqD,SAAS,CACV7B,eAAe,GAAD,mBAAMxB,KAAKqB,MAAMG,gBAAjB,CAAiCiC,Q,0BAK3D,WAEIzD,KAAKqD,SAAS,CACV7B,eAAgB,O,2BAIxB,WAEIxB,KAAKqD,SAAS,CACV7B,eAAgBZ,M,wCAIxB,SAA2B+C,GAEvB3D,KAAKqD,SAAS,CACV/B,YAAaqC,EAAMC,OAAOC,U,4BAIlC,SAAeC,GAEX9D,KAAKqD,SAAS,CACV/B,YAAawC,EAAQC,OAAO/D,KAAKqB,MAAMC,iB,yBAI/C,SAAY0C,GAERhE,KAAKqD,SAAS,CACX3B,SAAUsC,M,4BAIjB,SAAe3C,GAEX,IAAI4C,EAAc,GAMlB,OALA5C,EAAME,iBAAiB2C,SAAQ,SAAAC,GAC3B9C,EAAMG,eAAe0C,SAAQ,SAAAT,GACzBQ,EAAW,sBAAOA,GAAP,CAAqB5C,EAAMC,YAAc8C,KAAKC,IAAI,EAAGZ,EAAO,EAAIU,EAAK1D,KAAK,YAGtFwD,I,oBAGX,WAGI,IAFH,IAAD,OACQK,EAAgB,GADxB,WAEab,GAELa,EAAa,sBAAOA,GAAP,CACT,kBAAC,IAAD,CACIxB,QAAWW,EACXb,QAAW,kBAAM,EAAKd,aAAa2B,IACnChB,IAAOgB,EACPf,OAAU,EAAKrB,MAAMG,eAAemB,SAASc,GAC7CV,QAAM,OARTU,EArME,EAqMmBA,GArMH,IAqM2BA,EACrD,EADQA,GAYT,OACI,kBAAC,IAAD,CAASjB,UAAU,UACf,kBAAC,IAAD,CAAQ+B,KAAK,QAAb,SACA,kBAAC,IAAD,KACI,kBAAC,IAAKC,MAAN,KACI,+CACA,kBAAC,IAAD,CAAOC,OAAK,EAACT,KAAK,SAASU,YAAY,KAAKC,QAAM,EAACJ,KAAK,OAAOV,MAAO7D,KAAKqB,MAAMC,YAAasD,SAAU5E,KAAKiC,2BAC7G4C,MAAM,KAAKC,cAAc,eAErB,2BAAOtC,UAAU,iBACjB,kBAAC,IAAD,CAAQwB,KAAK,SAASpB,QAAS,kBAAM,EAAKmC,gBAAgB,MAA1D,OACA,kBAAC,IAAD,CAAQf,KAAK,SAASpB,QAAS,kBAAM,EAAKmC,gBAAgB,KAA1D,MACA,kBAAC,IAAD,CAAQf,KAAK,SAASpB,QAAS,kBAAM,EAAKmC,eAAe,KAAzD,MACA,kBAAC,IAAD,CAAQf,KAAK,SAASpB,QAAS,kBAAM,EAAKmC,eAAe,MAAzD,SAKR,kBAAC,IAAKP,MAAN,KACI,0CACA,kBAAC,EAAD,CACItE,KACI,CACIF,KAAKgF,eAAe,EAAE,GACtBhF,KAAKgF,eAAe,EAAE,IACtB,CACK,kBAAC,IAAD,CAAQvC,IAAI,QAAQG,QAAS5C,KAAK6B,gBAAlC,SACA,kBAAC,IAAD,CAAQY,IAAI,SAASG,QAAS5C,KAAK2B,cAAnC,eAOrB,kBAAC,IAAK6C,MAAN,KACI,yCACA,kBAAC,EAAD,CAAYtE,KAAQ,CAChBoE,EACA,CACK,kBAAC,IAAD,CAAQ7B,IAAI,QAAQG,QAAS5C,KAAK+B,cAAlC,SACA,kBAAC,IAAD,CAAQU,IAAI,MAAMG,QAAS5C,KAAKgC,eAAhC,YAIb,kBAAC,IAAKwC,MAAN,KACI,2CACA,kBAAC,IAAOrB,MAAR,CAAcsB,OAAK,GACd/D,EAAUP,KAAI,SAAAuB,GAAQ,OACnB,kBAAC,IAAD,CAAQkB,QAAS,kBAAM,EAAKqC,YAAYvD,EAASnB,OAAOwC,QAAM,EAACL,OAAQ,EAAKrB,MAAMK,WAAaA,EAASnB,MAAOmB,EAASf,sB,gCAapJ,SAAmBuE,EAAWC,GAE1B,IAAMC,EAAWpF,KAAKqF,eAAerF,KAAKqB,OACpCiE,EAAWtF,KAAKqF,eAAeF,GACrCI,QAAQC,IAAIJ,GACRpF,KAAKqB,MAAMK,WAAayD,EAAUzD,UAElCb,EAAUM,IAAI,CACVsE,WAAY,CACRzB,KAAMhE,KAAKqB,MAAMK,YAGzBb,EAAU6E,aACV7E,EAAU8E,cAAcP,KAGxBE,EAASpB,SAAQ,SAAA0B,GACRR,EAASzC,SAASiD,IACnB/E,EAAUgF,eAAeD,MAEjCR,EAASlB,SAAQ,SAAA4B,GACTR,EAAS3C,SAASmD,IACnBjF,EAAU8E,cAAcG,W,GAxQvBzF,aClCL0F,GCnBS1F,Y,4JDKtB,WACI,OAAO,yBAAKmC,UAAU,OAElB,kBAAC,IAAD,CAAMwD,QAAQ,QAAQC,QAAM,EAACC,UAAQ,EAACC,WAAS,EAAC1B,OAAK,EAAC2B,UAAQ,GAE1D,kBAAC,EAAD,Y,GANI/F,c,kBEGZgG,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9F,QACfwF,UAAUC,cAAcQ,WAK1B/B,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrB+B,OAAM,SAAAC,GACLjC,QAAQiC,MAAM,4CAA6CA,MCvEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDYlC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,IAAwBvB,OAAOC,UAC3CuB,SAAWxB,OAAOC,SAASuB,OAIvC,OAGFxB,OAAOyB,iBAAiB,QAAQ,WAC9B,IAAMpB,EAAK,UAAMkB,IAAN,sBAEPzB,IAiDV,SAAiCO,GAE/BqB,MAAMrB,GACHI,MAAK,SAAAkB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CzB,UAAUC,cAAcyB,MAAMvB,MAAK,SAAAC,GACjCA,EAAauB,aAAaxB,MAAK,WAC7BT,OAAOC,SAASiC,eAKpB9B,EAAgBC,MAGnBW,OAAM,WACLhC,QAAQC,IACN,oEArEAkD,CAAwB9B,GAIxBC,UAAUC,cAAcyB,MAAMvB,MAAK,WACjCzB,QAAQC,IACN,gHAMJmB,EAAgBC,OCvCxB+B,GAGA,IAAMC,EAAU,IAAIC,IACpBlB,SAASK,iBAAiB,SAAS,SAASc,IACxCnB,SAASoB,oBAAoB,QAASD,GAAe,GACrDF,EAAQI,YACT,K","file":"static/js/main.11b466c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react'\r\nimport './ButtonGrid.css'\r\n\r\nclass ButtonGrid extends Component\r\n{\r\n    render() {\r\n        return (\r\n          <div class=\"buttonGrid\">\r\n              {this.props.rows.map(\r\n                  row => (\r\n                      <div>\r\n                          {row}\r\n                      </div>\r\n                  )\r\n              )}\r\n          </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ButtonGrid;","import React, {Component} from 'react';\r\nimport { Button, Header, Input, Segment, Form, Icon, Label } from 'semantic-ui-react';\r\nimport ButtonGrid from './ButtonGrid.jsx';\r\nimport Tone from 'tone';\r\n\r\n\r\nconst NOTES = [\r\n    {name: 'A', displayNames: ['A','A'], step: 0},\r\n    {name: 'Bb', displayNames: ['B♭','A♯'], step: 1},\r\n    {name: 'B', displayNames: ['B','B'], step: 2},\r\n    {name: 'C', displayNames: ['C','C'], step: 3},\r\n    {name: 'Db', displayNames: ['D♭','C♯'], step: 4},\r\n    {name: 'D', displayNames: ['D','D'], step: 5},\r\n    {name: 'Eb', displayNames: ['E♭','D♯'], step: 6},\r\n    {name: 'E', displayNames: ['E','E'], step: 7},\r\n    {name: 'F', displayNames: ['F','F'], step: 8},\r\n    {name: 'Gb', displayNames: ['G♭','F♯'], step: 9},\r\n    {name: 'G', displayNames: ['G','G'], step: 10},\r\n    {name: 'Ab', displayNames: ['A♭','G♯'], step: 11},\r\n];\r\n\r\nconst Waveforms = [\r\n    {name: 'sine', displayName: 'Sine'},\r\n    {name: 'triangle', displayName: 'Triangle'},\r\n    {name: 'square', displayName: 'Square'},\r\n    {name: 'sawtooth', displayName: 'Sawtooth'},\r\n];\r\n\r\nconst MIN_OCTAVE = 2, MAX_OCTAVE = 6, OCTAVES = [2,3,4,5,6];\r\n\r\nfunction arrayEqual(arr1, arr2)\r\n{\r\n    if (arr1.size !== arr2.size)\r\n        return false;\r\n    arr1.forEach(x => {\r\n        arr2.forEach(y => {\r\n            if (x !== y)\r\n                return false;\r\n        })\r\n    });\r\n    return true;\r\n}\r\n\r\nconst polySynth = new Tone.PolySynth(OCTAVES.length*NOTES.length, Tone.Synth).toMaster();\r\npolySynth.set({\r\n    \"envelope\": {\r\n        \"attack\": 0.1,\r\n        \"decay\": 2,\r\n        \"sustain\": 0.2,\r\n        \"release\": 1,\r\n    }, \"oscillator\": {\r\n        \"type\": 'sine',\r\n    }\r\n});\r\n\r\n\r\nclass Tuner extends Component\r\n{\r\n\r\n    constructor()\r\n    {\r\n        super();\r\n\r\n        this.state = {\r\n            pitchCenter: 440,\r\n            currentNoteNames: [],\r\n            currentOctaves: [4],\r\n            currentNoteDisplayTypeIndex: 0,\r\n            waveform: 'sine',\r\n        };\r\n\r\n        this.flipNotation = this.flipNotation.bind(this);\r\n        this.resetNoteNames = this.resetNoteNames.bind(this);\r\n        this.toggleOctave = this.toggleOctave.bind(this);\r\n        this.resetOctaves = this.resetOctaves.bind(this);\r\n        this.setAllOctaves = this.setAllOctaves.bind(this);\r\n        this.handleFrequencyInputChange = this.handleFrequencyInputChange.bind(this);\r\n    }\r\n\r\n    getNoteButtons(startIndex,endIndex)\r\n    {\r\n        let buttons = [];\r\n        for (let i=startIndex; i<=endIndex; ++i)\r\n        {\r\n            buttons = [...buttons, this.getNoteButton(i)\r\n            ];\r\n        }\r\n        return buttons;\r\n    }\r\n\r\n    getNoteButton(index)\r\n    {\r\n        let tuner = this;\r\n        return (\r\n            <Button className='noround'\r\n                    key = {index}\r\n                    active = {tuner.state.currentNoteNames.includes(NOTES[index])}\r\n                    onClick = {() => this.toggleNoteName(NOTES[index])}\r\n                    content = {NOTES[index].displayNames[this.state.currentNoteDisplayTypeIndex]}\r\n                    toggle\r\n            />);\r\n    }\r\n\r\n    generateNoteButtonColumns(rows=2,cols=6)\r\n    {\r\n        let groups = [];\r\n        for (let col=0; col<cols; col+=1)\r\n        {\r\n            let buttons = [];\r\n            for (let row=0; row<rows; ++row)\r\n            {\r\n                buttons = [...buttons, this.getNoteButton(col + cols*row)]\r\n            }\r\n            groups = [...groups,\r\n                (\r\n                    <Button.Group key={col} vertical>\r\n                        {buttons}\r\n                    </Button.Group>\r\n                )\r\n            ]\r\n        }\r\n        return groups;\r\n    }\r\n\r\n    flipNotation()\r\n    {\r\n        this.setState(\r\n            {\r\n                currentNoteDisplayTypeIndex: this.state.currentNoteDisplayTypeIndex === 1 ? 0 : 1,\r\n            }\r\n        );\r\n    }\r\n\r\n    toggleNoteName(noteName)\r\n    {\r\n        if (this.state.currentNoteNames.includes(noteName))\r\n        {\r\n            this.setState({\r\n                    currentNoteNames: this.state.currentNoteNames.filter(\r\n                        pitch => pitch !== noteName\r\n                    )\r\n            });\r\n        }\r\n        else\r\n        {\r\n            this.setState({\r\n                currentNoteNames: [...this.state.currentNoteNames, noteName],\r\n            });\r\n        }\r\n    }\r\n\r\n    resetNoteNames()\r\n    {\r\n        this.setState({\r\n            currentNoteNames: [],\r\n        });\r\n    }\r\n\r\n    toggleOctave(octave)\r\n    {\r\n        if (this.state.currentOctaves.includes(octave))\r\n        {\r\n            this.setState({\r\n                currentOctaves: this.state.currentOctaves.filter(\r\n                    oct => oct !== octave\r\n                )\r\n            });\r\n        }\r\n        else\r\n        {\r\n            this.setState({\r\n                currentOctaves: [...this.state.currentOctaves, octave],\r\n            });\r\n        }\r\n    }\r\n\r\n    resetOctaves()\r\n    {\r\n        this.setState({\r\n            currentOctaves: [],\r\n        });\r\n    }\r\n\r\n    setAllOctaves()\r\n    {\r\n        this.setState({\r\n            currentOctaves: OCTAVES,\r\n        });\r\n    }\r\n\r\n    handleFrequencyInputChange(event)\r\n    {\r\n        this.setState({\r\n            pitchCenter: event.target.value,\r\n        });\r\n    }\r\n\r\n    deltaFrequency(delta)\r\n    {\r\n        this.setState({\r\n            pitchCenter: delta + Number(this.state.pitchCenter),\r\n        });\r\n    }\r\n\r\n    setWaveform(type)\r\n    {\r\n        this.setState({\r\n           waveform: type,\r\n        });\r\n    }\r\n\r\n    getFrequencies(state)\r\n    {\r\n        let frequencies = [];\r\n        state.currentNoteNames.forEach(note => {\r\n            state.currentOctaves.forEach(octave => {\r\n                frequencies = [...frequencies, (state.pitchCenter * Math.pow(2, octave-4 + note.step/12))]\r\n            });\r\n        });\r\n        return frequencies;\r\n    }\r\n\r\n    render()\r\n    {\r\n        let octaveButtons = [];\r\n        for (let octave = MIN_OCTAVE; octave <= MAX_OCTAVE; ++octave)\r\n        {\r\n            octaveButtons = [...octaveButtons, (\r\n                <Button\r\n                    content = {octave}\r\n                    onClick = {() => this.toggleOctave(octave)}\r\n                    key = {octave}\r\n                    active = {this.state.currentOctaves.includes(octave)}\r\n                    toggle\r\n                />\r\n            )]\r\n        }\r\n        return (\r\n            <Segment className='widget'>\r\n                <Header size='huge'>Tuner</Header>\r\n                <Form>\r\n                    <Form.Field>\r\n                        <label>Pitch center</label>\r\n                        <Input fluid type='number' placeholder='Hz' action size=\"huge\" value={this.state.pitchCenter} onChange={this.handleFrequencyInputChange}\r\n                        label=\"Hz\" labelPosition=\"left corner\">\r\n\r\n                            <input className=\"pitch-center\"/>\r\n                            <Button type='submit' onClick={() => this.deltaFrequency(-10)}>-10</Button>\r\n                            <Button type='submit' onClick={() => this.deltaFrequency(-1)}>-1</Button>\r\n                            <Button type='submit' onClick={() => this.deltaFrequency(1)}>+1</Button>\r\n                            <Button type='submit' onClick={() => this.deltaFrequency(10)}>+10</Button>\r\n\r\n                        </Input>\r\n                    </Form.Field>\r\n\r\n                    <Form.Field>\r\n                        <label>Pitches</label>\r\n                        <ButtonGrid\r\n                            rows = {\r\n                                [\r\n                                    this.getNoteButtons(0,5),\r\n                                    this.getNoteButtons(6,11),\r\n                                    [\r\n                                        (<Button key='reset' onClick={this.resetNoteNames}>Reset</Button>),\r\n                                        (<Button key='switch' onClick={this.flipNotation}>Rename</Button>)\r\n                                    ]\r\n                                ]\r\n                            }\r\n                        />\r\n\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>Octave</label>\r\n                        <ButtonGrid rows = {[\r\n                            octaveButtons,\r\n                            [\r\n                                (<Button key='reset' onClick={this.resetOctaves}>Reset</Button>),\r\n                                (<Button key='all' onClick={this.setAllOctaves}>All</Button>),\r\n                            ]\r\n                        ]}/>\r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <label>Waveform</label>\r\n                        <Button.Group fluid>\r\n                            {Waveforms.map(waveform => (\r\n                                <Button onClick={() => this.setWaveform(waveform.name)} toggle active={this.state.waveform === waveform.name}>{waveform.displayName}</Button>\r\n                            ))}\r\n                        </Button.Group>\r\n                    </Form.Field>\r\n                </Form>\r\n\r\n            </Segment>\r\n\r\n        )\r\n    }\r\n\r\n\r\n\r\n    componentDidUpdate(prevProps, prevState)\r\n    {\r\n        const newFreqs = this.getFrequencies(this.state);\r\n        const oldFreqs = this.getFrequencies(prevState);\r\n        console.log(newFreqs);\r\n        if (this.state.waveform !== prevState.waveform)\r\n        {\r\n            polySynth.set({\r\n                oscillator: {\r\n                    type: this.state.waveform,\r\n                }\r\n            });\r\n            polySynth.releaseAll();\r\n            polySynth.triggerAttack(newFreqs);\r\n        } else\r\n        {\r\n            oldFreqs.forEach(oldFreq=>{\r\n                if (!newFreqs.includes(oldFreq))\r\n                    polySynth.triggerRelease(oldFreq);\r\n            });\r\n            newFreqs.forEach(newFreq =>{\r\n               if (!oldFreqs.includes(newFreq))\r\n                   polySynth.triggerAttack(newFreq);\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default Tuner;\r\n","import React, { Component } from 'react';\r\nimport {Grid} from 'semantic-ui-react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Tuner from './Tuner.jsx'\r\nimport Metronome from \"./Metronome\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n      return <div className=\"App\">\r\n\r\n          <Grid columns='equal' padded doubling stackable fluid centered >\r\n\r\n              <Tuner/>\r\n\r\n          </Grid>\r\n\r\n\r\n      </div>;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, {Component} from 'react';\r\nimport {Button, Input, Segment, Header} from 'semantic-ui-react';\r\n\r\nclass Metronome extends Component\r\n{\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Segment className='widget'>\r\n                <Header size='huge'>Metronome</Header>\r\n                <Input as='div'>aaa</Input>\r\n            </Segment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Metronome;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport App from './App';\r\nimport NoSleep from 'nosleep.js'\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n\r\n// Prevent screen from going to sleep\r\nconst noSleep = new NoSleep();\r\ndocument.addEventListener('click', function enableNoSleep() {\r\n    document.removeEventListener('click', enableNoSleep, false);\r\n    noSleep.enable();\r\n}, false);"],"sourceRoot":""}